# Generated from test.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,441,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,3,0,124,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,134,
        8,1,1,2,1,2,1,2,1,2,3,2,140,8,2,1,3,1,3,1,3,1,3,3,3,146,8,3,1,4,
        1,4,1,4,1,4,3,4,152,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,170,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,184,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,194,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,204,8,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,3,9,214,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,226,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
        3,11,234,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,242,8,12,1,13,1,
        13,1,13,1,13,1,13,1,13,3,13,250,8,13,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
        39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,5,44,347,
        8,44,10,44,12,44,350,9,44,1,45,1,45,5,45,354,8,45,10,45,12,45,357,
        9,45,1,46,4,46,360,8,46,11,46,12,46,361,1,47,1,47,1,48,1,48,1,48,
        1,48,5,48,370,8,48,10,48,12,48,373,9,48,1,48,1,48,1,49,1,49,3,49,
        379,8,49,1,50,1,50,1,50,1,50,5,50,385,8,50,10,50,12,50,388,9,50,
        1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,398,8,51,10,51,12,51,
        401,9,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,412,8,
        52,10,52,12,52,415,9,52,1,52,1,52,1,52,1,52,1,52,1,53,3,53,423,8,
        53,1,53,1,53,4,53,427,8,53,11,53,12,53,428,1,53,1,53,1,54,4,54,434,
        8,54,11,54,12,54,435,1,54,1,54,1,55,1,55,3,386,399,413,0,56,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,1,0,
        7,1,0,65,90,4,0,48,57,65,90,95,95,97,122,2,0,65,90,97,122,1,0,48,
        57,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,4,
        0,10,10,13,13,34,34,92,92,3,0,8,10,12,13,32,32,467,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        1,123,1,0,0,0,3,133,1,0,0,0,5,139,1,0,0,0,7,145,1,0,0,0,9,151,1,
        0,0,0,11,169,1,0,0,0,13,183,1,0,0,0,15,193,1,0,0,0,17,203,1,0,0,
        0,19,213,1,0,0,0,21,225,1,0,0,0,23,233,1,0,0,0,25,241,1,0,0,0,27,
        249,1,0,0,0,29,251,1,0,0,0,31,256,1,0,0,0,33,262,1,0,0,0,35,267,
        1,0,0,0,37,271,1,0,0,0,39,278,1,0,0,0,41,283,1,0,0,0,43,288,1,0,
        0,0,45,298,1,0,0,0,47,300,1,0,0,0,49,302,1,0,0,0,51,304,1,0,0,0,
        53,306,1,0,0,0,55,308,1,0,0,0,57,310,1,0,0,0,59,312,1,0,0,0,61,314,
        1,0,0,0,63,316,1,0,0,0,65,318,1,0,0,0,67,320,1,0,0,0,69,322,1,0,
        0,0,71,324,1,0,0,0,73,326,1,0,0,0,75,328,1,0,0,0,77,330,1,0,0,0,
        79,332,1,0,0,0,81,335,1,0,0,0,83,337,1,0,0,0,85,339,1,0,0,0,87,341,
        1,0,0,0,89,344,1,0,0,0,91,351,1,0,0,0,93,359,1,0,0,0,95,363,1,0,
        0,0,97,365,1,0,0,0,99,378,1,0,0,0,101,380,1,0,0,0,103,393,1,0,0,
        0,105,407,1,0,0,0,107,426,1,0,0,0,109,433,1,0,0,0,111,439,1,0,0,
        0,113,114,5,99,0,0,114,115,5,108,0,0,115,116,5,97,0,0,116,117,5,
        115,0,0,117,124,5,115,0,0,118,119,5,67,0,0,119,120,5,76,0,0,120,
        121,5,65,0,0,121,122,5,83,0,0,122,124,5,83,0,0,123,113,1,0,0,0,123,
        118,1,0,0,0,124,2,1,0,0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,
        128,5,115,0,0,128,134,5,101,0,0,129,130,5,69,0,0,130,131,5,76,0,
        0,131,132,5,83,0,0,132,134,5,69,0,0,133,125,1,0,0,0,133,129,1,0,
        0,0,134,4,1,0,0,0,135,136,5,102,0,0,136,140,5,105,0,0,137,138,5,
        70,0,0,138,140,5,73,0,0,139,135,1,0,0,0,139,137,1,0,0,0,140,6,1,
        0,0,0,141,142,5,105,0,0,142,146,5,102,0,0,143,144,5,73,0,0,144,146,
        5,70,0,0,145,141,1,0,0,0,145,143,1,0,0,0,146,8,1,0,0,0,147,148,5,
        105,0,0,148,152,5,110,0,0,149,150,5,73,0,0,150,152,5,78,0,0,151,
        147,1,0,0,0,151,149,1,0,0,0,152,10,1,0,0,0,153,154,5,105,0,0,154,
        155,5,110,0,0,155,156,5,104,0,0,156,157,5,101,0,0,157,158,5,114,
        0,0,158,159,5,105,0,0,159,160,5,116,0,0,160,170,5,115,0,0,161,162,
        5,73,0,0,162,163,5,78,0,0,163,164,5,72,0,0,164,165,5,69,0,0,165,
        166,5,82,0,0,166,167,5,73,0,0,167,168,5,84,0,0,168,170,5,83,0,0,
        169,153,1,0,0,0,169,161,1,0,0,0,170,12,1,0,0,0,171,172,5,105,0,0,
        172,173,5,115,0,0,173,174,5,118,0,0,174,175,5,111,0,0,175,176,5,
        105,0,0,176,184,5,100,0,0,177,178,5,73,0,0,178,179,5,83,0,0,179,
        180,5,86,0,0,180,181,5,79,0,0,181,182,5,73,0,0,182,184,5,68,0,0,
        183,171,1,0,0,0,183,177,1,0,0,0,184,14,1,0,0,0,185,186,5,108,0,0,
        186,187,5,111,0,0,187,188,5,111,0,0,188,194,5,112,0,0,189,190,5,
        76,0,0,190,191,5,79,0,0,191,192,5,79,0,0,192,194,5,80,0,0,193,185,
        1,0,0,0,193,189,1,0,0,0,194,16,1,0,0,0,195,196,5,112,0,0,196,197,
        5,111,0,0,197,198,5,111,0,0,198,204,5,108,0,0,199,200,5,80,0,0,200,
        201,5,79,0,0,201,202,5,79,0,0,202,204,5,76,0,0,203,195,1,0,0,0,203,
        199,1,0,0,0,204,18,1,0,0,0,205,206,5,116,0,0,206,207,5,104,0,0,207,
        208,5,101,0,0,208,214,5,110,0,0,209,210,5,84,0,0,210,211,5,72,0,
        0,211,212,5,69,0,0,212,214,5,78,0,0,213,205,1,0,0,0,213,209,1,0,
        0,0,214,20,1,0,0,0,215,216,5,119,0,0,216,217,5,104,0,0,217,218,5,
        105,0,0,218,219,5,108,0,0,219,226,5,101,0,0,220,221,5,87,0,0,221,
        222,5,72,0,0,222,223,5,73,0,0,223,224,5,76,0,0,224,226,5,69,0,0,
        225,215,1,0,0,0,225,220,1,0,0,0,226,22,1,0,0,0,227,228,5,110,0,0,
        228,229,5,101,0,0,229,234,5,119,0,0,230,231,5,78,0,0,231,232,5,69,
        0,0,232,234,5,87,0,0,233,227,1,0,0,0,233,230,1,0,0,0,234,24,1,0,
        0,0,235,236,5,110,0,0,236,237,5,111,0,0,237,242,5,116,0,0,238,239,
        5,78,0,0,239,240,5,79,0,0,240,242,5,84,0,0,241,235,1,0,0,0,241,238,
        1,0,0,0,242,26,1,0,0,0,243,244,5,108,0,0,244,245,5,101,0,0,245,250,
        5,116,0,0,246,247,5,76,0,0,247,248,5,69,0,0,248,250,5,84,0,0,249,
        243,1,0,0,0,249,246,1,0,0,0,250,28,1,0,0,0,251,252,5,116,0,0,252,
        253,5,114,0,0,253,254,5,117,0,0,254,255,5,101,0,0,255,30,1,0,0,0,
        256,257,5,102,0,0,257,258,5,97,0,0,258,259,5,108,0,0,259,260,5,115,
        0,0,260,261,5,101,0,0,261,32,1,0,0,0,262,263,5,66,0,0,263,264,5,
        111,0,0,264,265,5,111,0,0,265,266,5,108,0,0,266,34,1,0,0,0,267,268,
        5,73,0,0,268,269,5,110,0,0,269,270,5,116,0,0,270,36,1,0,0,0,271,
        272,5,83,0,0,272,273,5,116,0,0,273,274,5,114,0,0,274,275,5,105,0,
        0,275,276,5,110,0,0,276,277,5,103,0,0,277,38,1,0,0,0,278,279,5,118,
        0,0,279,280,5,111,0,0,280,281,5,105,0,0,281,282,5,100,0,0,282,40,
        1,0,0,0,283,284,5,115,0,0,284,285,5,101,0,0,285,286,5,108,0,0,286,
        287,5,102,0,0,287,42,1,0,0,0,288,289,5,83,0,0,289,290,5,69,0,0,290,
        291,5,76,0,0,291,292,5,70,0,0,292,293,5,95,0,0,293,294,5,84,0,0,
        294,295,5,89,0,0,295,296,5,80,0,0,296,297,5,69,0,0,297,44,1,0,0,
        0,298,299,5,59,0,0,299,46,1,0,0,0,300,301,5,58,0,0,301,48,1,0,0,
        0,302,303,5,123,0,0,303,50,1,0,0,0,304,305,5,125,0,0,305,52,1,0,
        0,0,306,307,5,91,0,0,307,54,1,0,0,0,308,309,5,93,0,0,309,56,1,0,
        0,0,310,311,5,40,0,0,311,58,1,0,0,0,312,313,5,41,0,0,313,60,1,0,
        0,0,314,315,5,44,0,0,315,62,1,0,0,0,316,317,5,34,0,0,317,64,1,0,
        0,0,318,319,5,39,0,0,319,66,1,0,0,0,320,321,5,43,0,0,321,68,1,0,
        0,0,322,323,5,45,0,0,323,70,1,0,0,0,324,325,5,42,0,0,325,72,1,0,
        0,0,326,327,5,47,0,0,327,74,1,0,0,0,328,329,5,126,0,0,329,76,1,0,
        0,0,330,331,5,60,0,0,331,78,1,0,0,0,332,333,5,60,0,0,333,334,5,61,
        0,0,334,80,1,0,0,0,335,336,5,61,0,0,336,82,1,0,0,0,337,338,5,46,
        0,0,338,84,1,0,0,0,339,340,5,64,0,0,340,86,1,0,0,0,341,342,5,60,
        0,0,342,343,5,45,0,0,343,88,1,0,0,0,344,348,7,0,0,0,345,347,7,1,
        0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,
        0,0,349,90,1,0,0,0,350,348,1,0,0,0,351,355,7,2,0,0,352,354,7,1,0,
        0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,
        0,356,92,1,0,0,0,357,355,1,0,0,0,358,360,7,3,0,0,359,358,1,0,0,0,
        360,361,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,94,1,0,0,0,363,
        364,7,3,0,0,364,96,1,0,0,0,365,371,5,34,0,0,366,367,5,92,0,0,367,
        370,7,4,0,0,368,370,8,5,0,0,369,366,1,0,0,0,369,368,1,0,0,0,370,
        373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,
        371,1,0,0,0,374,375,5,34,0,0,375,98,1,0,0,0,376,379,3,29,14,0,377,
        379,3,31,15,0,378,376,1,0,0,0,378,377,1,0,0,0,379,100,1,0,0,0,380,
        381,5,45,0,0,381,382,5,45,0,0,382,386,1,0,0,0,383,385,9,0,0,0,384,
        383,1,0,0,0,385,388,1,0,0,0,386,387,1,0,0,0,386,384,1,0,0,0,387,
        389,1,0,0,0,388,386,1,0,0,0,389,390,5,10,0,0,390,391,1,0,0,0,391,
        392,6,50,0,0,392,102,1,0,0,0,393,394,5,40,0,0,394,395,5,42,0,0,395,
        399,1,0,0,0,396,398,9,0,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,
        400,1,0,0,0,399,397,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,
        403,5,42,0,0,403,404,5,41,0,0,404,405,1,0,0,0,405,406,6,51,0,0,406,
        104,1,0,0,0,407,408,5,46,0,0,408,409,5,46,0,0,409,413,1,0,0,0,410,
        412,9,0,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,414,1,0,0,0,413,
        411,1,0,0,0,414,416,1,0,0,0,415,413,1,0,0,0,416,417,5,46,0,0,417,
        418,5,46,0,0,418,419,1,0,0,0,419,420,6,52,0,0,420,106,1,0,0,0,421,
        423,5,13,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,
        427,5,10,0,0,425,427,5,13,0,0,426,422,1,0,0,0,426,425,1,0,0,0,427,
        428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,
        431,6,53,0,0,431,108,1,0,0,0,432,434,7,6,0,0,433,432,1,0,0,0,434,
        435,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,
        438,6,54,0,0,438,110,1,0,0,0,439,440,9,0,0,0,440,112,1,0,0,0,28,
        0,123,133,139,145,151,169,183,193,203,213,225,233,241,249,348,355,
        361,369,371,378,386,399,413,422,426,428,435,1,6,0,0
    ]

class testLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FI = 3
    IF = 4
    IN = 5
    INHERITS = 6
    ISVOID = 7
    LOOP = 8
    POOL = 9
    THEN = 10
    WHILE = 11
    NEW = 12
    NOT = 13
    LET = 14
    TRUE = 15
    FALSE = 16
    BOOL = 17
    INT = 18
    STRING = 19
    VOID = 20
    SELF = 21
    SELF_TYPE = 22
    SEMICOLON = 23
    COLON = 24
    LBRACE = 25
    RBRACE = 26
    LBRACKET = 27
    RBRACKET = 28
    LPAR = 29
    RPAR = 30
    COMMA = 31
    QUOTES = 32
    APOSTROPHE = 33
    ADD = 34
    SUB = 35
    MULTIPLY = 36
    DIVIDE = 37
    NEGATION = 38
    LESS_OP = 39
    LESS_EQ_OP = 40
    EQUAL_OP = 41
    DOT = 42
    AT = 43
    ASIGN = 44
    TYPE_ID = 45
    VAR_NAME = 46
    INTEGER = 47
    DIGIT = 48
    STRING_LIT = 49
    BOOL_LIT = 50
    COMMENT = 51
    COMMENT_2 = 52
    COMMENT_3 = 53
    NEWLINE = 54
    WS = 55
    ERR_TOKEN = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'Bool'", "'Int'", "'String'", "'void'", 
            "'self'", "'SELF_TYPE'", "';'", "':'", "'{'", "'}'", "'['", 
            "']'", "'('", "')'", "','", "'\"'", "'''", "'+'", "'-'", "'*'", 
            "'/'", "'~'", "'<'", "'<='", "'='", "'.'", "'@'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", "TRUE", "FALSE", 
            "BOOL", "INT", "STRING", "VOID", "SELF", "SELF_TYPE", "SEMICOLON", 
            "COLON", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "LPAR", 
            "RPAR", "COMMA", "QUOTES", "APOSTROPHE", "ADD", "SUB", "MULTIPLY", 
            "DIVIDE", "NEGATION", "LESS_OP", "LESS_EQ_OP", "EQUAL_OP", "DOT", 
            "AT", "ASIGN", "TYPE_ID", "VAR_NAME", "INTEGER", "DIGIT", "STRING_LIT", 
            "BOOL_LIT", "COMMENT", "COMMENT_2", "COMMENT_3", "NEWLINE", 
            "WS", "ERR_TOKEN" ]

    ruleNames = [ "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
                  "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", 
                  "TRUE", "FALSE", "BOOL", "INT", "STRING", "VOID", "SELF", 
                  "SELF_TYPE", "SEMICOLON", "COLON", "LBRACE", "RBRACE", 
                  "LBRACKET", "RBRACKET", "LPAR", "RPAR", "COMMA", "QUOTES", 
                  "APOSTROPHE", "ADD", "SUB", "MULTIPLY", "DIVIDE", "NEGATION", 
                  "LESS_OP", "LESS_EQ_OP", "EQUAL_OP", "DOT", "AT", "ASIGN", 
                  "TYPE_ID", "VAR_NAME", "INTEGER", "DIGIT", "STRING_LIT", 
                  "BOOL_LIT", "COMMENT", "COMMENT_2", "COMMENT_3", "NEWLINE", 
                  "WS", "ERR_TOKEN" ]

    grammarFileName = "test.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


